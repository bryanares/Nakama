<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="nakama">Nakama</string>
    <string name="anime_picture">Anime Picture</string>
    <string name="apex_legends">Apex Legends</string>
    <string name="provides_a_material_card_this_class_supplies_material_styles_for_the_card_in_the_constructor_the_widget_will_display_the_correct_default_material_styles_without_the_use_of_a_style_flag_stroke_width_can_be_set_using_the_strokewidth_attribute_set_the_stroke_color_using_the_strokecolor_attribute_without_a_strokecolor_the_card_will_not_render_a_stroked_border_regardless_of_the_strokewidth_value_cards_implement_checkable_a_default_way_to_switch_to_android_checked_state_is_not_provided_clients_have_to_call_setchecked_boolean_this_shows_the_app_checkedicon_and_changes_the_overlay_color_cards_also_have_a_custom_state_meant_to_be_used_when_a_card_is_draggable_app_dragged_state_it_s_used_by_calling_setdragged_boolean_this_changes_the_overlay_color_and_elevates_the_card_to_convey_motion_note_the_actual_view_hierarchy_present_under_materialcardview_is_not_guaranteed_to_match_the_view_hierarchy_as_written_in_xml_as_a_result_calls_to_getparent_on_children_of_the_materialcardview_will_not_return_the_materialcardview_itself_but_rather_an_intermediate_view_if_you_need_to_access_a_materialcardview_directly_set_an_android_id_and_use_view_findviewbyid_int">Provides a Material card. This class supplies Material styles for the card in the constructor. The widget will display the correct default Material styles without the use of a style flag. Stroke width can be set using the strokeWidth attribute. Set the stroke color using the strokeColor attribute. Without a strokeColor, the card will not render a stroked border, regardless of the strokeWidth value. Cards implement Checkable, a default way to switch to android:checked_state is not provided. Clients have to call setChecked(boolean). This shows the app:checkedIcon and changes the overlay color. Cards also have a custom state meant to be used when a card is draggable app:dragged_state. It\'s used by calling setDragged(boolean). This changes the overlay color and elevates the card to convey motion. Note: The actual view hierarchy present under MaterialCardView is NOT guaranteed to match the view hierarchy as written in XML. As a result, calls to getParent() on children of the MaterialCardView, will not return the MaterialCardView itself, but rather an intermediate View. If you need to access a MaterialCardView directly, set an android:id and use View.findViewById(int).</string>
    <string name="rating">Rating</string>
    <string name="refresh">Refresh</string>
</resources>